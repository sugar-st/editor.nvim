# statements
snippet if "if ... then (if)" bA
if ${1:err != nil} {
	${2:${VISUAL}}
}
endsnippet

snippet "(\w[.\w]*) (\w[.\w]*) (\w[.\w]*).for" "for" r
for ${1} := `p! snip.rv = match.group(1)`; $1 < `p! snip.rv = match.group(2)`; $1 += `p! snip.rv = match.group(3)` \{
	$2
\}
endsnippet


snippet fi "for" bA
for ${1:i} := ${2:0}; $1 < $3; ${4:$1++} \{
	$5
\}
$0
endsnippet

snippet for "for" b
for ${1:true} \{
	$2
\}
$0
endsnippet

snippet "(\w[.\w]*)\.range" "range" r
for ${1:i} := range `!p snip.rv = match.group(1)` \{
	${2}
\}
endsnippet

snippet "(\w+)\.d" "Parenthesis (postfix)" r
`!p snip.rv = match.group(1)` := $0
endsnippet

# types
snippet ctx "context.Context" w
context.Context
endsnippet

snippet lii "[]int" wA
[]int
endsnippet

snippet li8 "[]int8" wA
[]int8
endsnippet

snippet li3 "[]int32" wA
[]int32
endsnippet

snippet li6 "[]int64" wA
[]int64
endsnippet

snippet ii "int" wA
int
endsnippet

snippet i8 "int8" wA
int8
endsnippet

snippet i3 "int32" wA
int32
endsnippet

snippet i6 "int64" wA
int64
endsnippet

snippet luu "[]uint" wA
[]uint
endsnippet

snippet lu8 "[]uint8" wA
[]uint8
endsnippet

snippet lu3 "[]uint32" wA
[]uint32
endsnippet

snippet lu6 "[]uint64" wA
[]uint64
endsnippet

snippet uu "uint" wA
uint
endsnippet

snippet u8 "uint8" wA
uint8
endsnippet

snippet u3 "uint32" wA
uint32
endsnippet

snippet u6 "uint64" wA
uint64
endsnippet
